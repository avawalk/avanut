เอฟเฟกต์ไฟ:

ใช้สีโทนร้อน เช่น แดง ส้ม และเหลือง โดยการสุ่มค่า RGB
อนุภาคจะลอยขึ้นและเล็กลงเมื่อเวลาผ่านไป
เอฟเฟกต์ควัน:

ใช้โทนสีเทาอ่อนและโปร่งใส
อนุภาคควันจะมีขนาดใหญ่กว่าและเคลื่อนที่ช้ากว่าเปลวไฟ
การเคลื่อนไหว:

ใช้ requestAnimationFrame เพื่อสร้างการเคลื่อนไหวที่ราบรื่น
อนุภาคใหม่จะถูกสร้างขึ้นตลอดเวลา และอนุภาคที่มีอายุเกินจะถูกลบออก
การปรับขนาดหน้าจอ:

Canvas จะปรับตามขนาดของหน้าจออัตโนมัติเมื่อทำการเปลี่ยนขนาดหน้าต่าง


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fire and Smoke Effect</title>
    <style>
        body {
            margin: 0;
            background: black;
            overflow: hidden;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <canvas id="fireCanvas"></canvas>
    <script>
        const canvas = document.getElementById('fireCanvas');
        const ctx = canvas.getContext('2d');

        // Fullscreen Canvas
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });

        const particles = [];
        const maxParticles = 300;

        class Particle {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.size = Math.random() * 5 + 1;
                this.speedY = Math.random() * -2 - 1;
                this.speedX = (Math.random() - 0.5) * 2;
                this.color = `rgba(${Math.random() * 255}, ${Math.random() * 50}, 0, ${Math.random() * 0.5 + 0.5})`;
                this.life = Math.random() * 100 + 50;
                this.opacity = 1;
            }

            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                this.life -= 1;
                this.opacity -= 0.01;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.globalAlpha = this.opacity;
                ctx.fill();
                ctx.globalAlpha = 1;
                ctx.closePath();
            }
        }

        function createParticle() {
            const x = canvas.width / 2 + (Math.random() - 0.5) * 100;
            const y = canvas.height - 50;
            particles.push(new Particle(x, y));
        }

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (particles.length < maxParticles) {
                createParticle();
            }

            particles.forEach((particle, index) => {
                particle.update();
                particle.draw();

                if (particle.life <= 0 || particle.opacity <= 0) {
                    particles.splice(index, 1);
                }
            });

            // Draw smoke
            for (let i = 0; i < particles.length / 3; i++) {
                const smokeParticle = particles[i];
                ctx.beginPath();
                ctx.arc(smokeParticle.x, smokeParticle.y - 50, smokeParticle.size * 1.5, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(100, 100, 100, ${smokeParticle.opacity})`;
                ctx.globalAlpha = smokeParticle.opacity * 0.7;
                ctx.fill();
                ctx.globalAlpha = 1;
                ctx.closePath();
            }

            requestAnimationFrame(animate);
        }

        animate();
    </script>
</body>
</html>
